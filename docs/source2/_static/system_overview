System Overview
===============

FANTASIA is distributed and executed through a robust, multi-layered infrastructure designed to support local development, containerized deployment, and high-performance computing environments.

Distribution Strategy
---------------------

1. **Official Release on PyPI**

   The pipeline is published as a Python package under the name ``fantasia`` on the Python Package Index (PyPI):

   .. code-block:: bash

      pip install fantasia

   This allows users to integrate the pipeline as a library or run it as a CLI tool via:

   .. code-block:: bash

      fantasia --help

   The PyPI distribution is defined in ``pyproject.toml`` and includes an executable entry point (`fantasia.main:main`).

2. **Docker-Based Image Generation**

   The official Docker image is automatically built from the **main branch** of the repository and includes all necessary runtime dependencies:

   - Torch + Transformers
   - PostgreSQL client with pgvector
   - RabbitMQ client
   - System tools (CD-HIT, HDF5, etc.)

   To build the image locally (clean build):

   .. code-block:: bash

      docker build --no-cache -t fantasia:latest .

   To publish it manually:

   .. code-block:: bash

      docker push your-user/fantasia:latest

   The Docker image serves as the basis for reproducible execution and HPC integration via Singularity.

3. **Singularity Execution on HPC**

   The Docker image is converted into a Singularity container for use on high-performance computing systems:

   .. code-block:: bash

      singularity build fantasia.sif docker-daemon://fantasia:latest

   This containerized execution model is fully compatible with GPU-enabled environments, distributed queues (RabbitMQ), and RAM-based PostgreSQL instances using ``pgvector``.

   For full HPC setup instructions, refer to the :ref:`fantasia_hpc_deployment` guide.

Summary
-------

+----------------------+-----------------------------+
| **Component**        | **Technology**              |
+======================+=============================+
| Distribution         | PyPI                        |
| Containerization     | Docker                      |
| HPC Runtime          | Singularity                 |
| Task Queues          | RabbitMQ                    |
| Embedding Models     | ProtT5, ProstT5, ESM2       |
| Similarity Database  | PostgreSQL + pgvector       |
+----------------------+-----------------------------+

This architecture ensures that FANTASIA can be run consistently across local, cloud, and cluster environments.
